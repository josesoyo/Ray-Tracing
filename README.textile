Ray Tracing module written with F#. The module can be used to simulate either backward ray tracing in B&W in order to perform a simple rendering of the scene that has been settle, or forward ray tracing which can be used for stray light analysis.
Currently the forward ray tracing includes the features for:
* Transform all the different objects that exist in the scene into a sensor to analyze the flux of particles for a surface, allowing to terminate the ray tracing (real sensor) or not (just control an object). Only the mesh type is not included as a sensor and theoretically there's no limit on the number of sensors.
* The rays contains phase information allowing the code to simulate interference patterns produced by interferometers.
* It's also possible to compute temporal changes on ray phase modulation due to oscillating objects at multiple frequencies, amplitudes and phases. This temporal domain information can be used to extract information on the frequency domain with the functions written on the Postprocessing module.



I have added some Jupyter notebooks that can be visualized on http://nbviewer.jupyter.org/ [Take care since they are not updated] 
